@page "/learnBlazor/bindProp"

<h1 class="text-success">Individual Product</h1>
<div class="row">
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Playground </h3> <hr />
        <div>
            Activate <input type="checkbox" @bind="@product.IsActive" /> <!-- Для чекбокса можно без события -->
            <br />
        </div>
        @* <div>
        Activate №2
        <input type="checkbox" @bind="@product.IsActive" @bind:event="oninput" />
        <br />
        </div>
        <div>
        Activate №3
        <!-- bind использует checked что-то вроде компонента, поэтому используем bind-value -->
        <input type="checkbox" @bind-value="@product.IsActive" checked="@(product.IsActive ? "checked" : null)" />
        <br />
        </div> *@


        <!-- Пример двухстороннего биндинга: используем поле для ввода -->
        <!-- type - тип вводимого значения; bind - связанное значение, свойство может изменятся прямо из интерфейса, изменится после перемещения фокуса с текстбокса-->
        <!-- bind:event="oninput" задает механизм срабатывания биндинга, в данном случае по вводу: ввели сразу поменялось -->
        <div>
            Price: <input type="number" @bind="@product.Price" @bind:event="oninput" />
            <br />
        </div>

        <div>
            Product Properties:
            <select @bind="selectedrop">
                <!-- связывание с переменной -->
                <!-- ручной вариант -->
                <option value="">Select a property</option>  <!-- дефолтный пункт - затычка -->
                <option value=@product.ProductProperties.FirstOrDefault(i => i.Id == 1)?.Key>@product.ProductProperties.FirstOrDefault(i => i.Id == 1)?.Key</option>
                <option value=@product.ProductProperties.FirstOrDefault(i => i.Id == 2)?.Key>@product.ProductProperties.FirstOrDefault(i => i.Id == 2)?.Key</option>
                <option value=@product.ProductProperties.FirstOrDefault(i => i.Id == 3)?.Key>@product.ProductProperties.FirstOrDefault(i => i.Id == 3)?.Key</option>
            </select>
            <br />
        </div>

       @*  <div>
            Product Properties:
            <select @bind="selectedrop">
                <!-- связывание с переменной -->
                <!-- оптимизированный вариант -->
                @foreach (var prop in product.ProductProperties)
                {
                    <option value=@prop.Key>@prop.Key</option>
                }
            </select>
            <br />
        </div> *@
    </div>
    <div class="col-6 border p-3">
        <h3 class="text-primary"> Product №@product.Id Summary </h3><hr />
        Name: @product.Name<br />  <!-- Односторонний биндинг -->
        Active: @product.IsActive<br />
        Price: @product.Price<br />
        This product is: @(product.IsActive ? "IsActive" : "InActive" /* Кусок кода внутри переменной, синатксис как у if-конструкции*/)
        <br />
        Property selected: @selectedrop
        <br />
        @if (!String.IsNullOrEmpty(selectedrop))
        {
            <p>Property Value : @product.ProductProperties.FirstOrDefault(i => i.Key == selectedrop)?.Value</p>
        }
    </div>

</div>

<div class="col-12 pt-4"> <!-- pt - падинг (от внешних элементов) -->
    <h2 class="text-success">Product Table</h2>
    <table class="table table-striped">
       @*  <thead>
            <tr>
                <th>Product Name</th>
                <th>Price</th>
                <th>Is Active</th>
            </tr>
        </thead> *@
        <tbody>
            @foreach (Demo_Product product in Products)
            {
                <tr>
                    <td> <input type="text" @bind-value=product.Name @bind-value:event="oninput" /></td>@* @product.Name *@
                    <td> <input type="text" @bind-value=product.Price @bind-value:event="oninput" /></td>@* @product.Price *@
                    <td><input type="checkbox" @bind-value="@product.IsActive" /></td>
                </tr>
            }
        </tbody>
    </table>
    <br/>
</div>

<h2 class="text-success">Product Summary</h2>
@foreach (Demo_Product product in Products)
{
    <p>@(product.Name + " [" + product.Price + "] is " + (product.IsActive ? "IsActive" : "InActive"))</p> <!-- <p> - тег обзац текста -->
}

@code
{
    // Код отрабатывет до ренднринга интерфейса
    private string selectedrop = "";

    Demo_Product product = new()
    {
            Id = 1,
            Name = "Rose Candle",
            IsActive = true,
            Price = 10.99,
            ProductProperties = new List<Demo_ProductProp>()
        {
            new Demo_ProductProp { Id = 1, Key = "Color", Value="Black" },
            new Demo_ProductProp { Id = 2, Key = "Flavor", Value="Rose Jasmine" },
            new Demo_ProductProp { Id = 3, Key = "Size", Value="20gr" },
        }
    };

    List<Demo_Product> Products = new();

    protected override void OnInitialized()
    {
        //base.OnInitialized();  // Перегрузка инициализации

        Products.Add(new()
        {
            Id = 1,
            Name = "Midnight Blaze",
            IsActive = false,
            Price = 3.44,
            ProductProperties = new List<Demo_ProductProp>()
            {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value="Rose" },
                new Demo_ProductProp { Id = 2, Key = "Size", Value="20gr" },
                new Demo_ProductProp { Id = 3, Key = "Color", Value="Purple" },
            }
        });

        Products.Add(new()
        {
            Id = 2,
            Name = "Blossom Lily",
            IsActive = true,
            Price = 16.01,
            ProductProperties = new List<Demo_ProductProp>()
            {
                new Demo_ProductProp { Id = 1, Key = "Flavor", Value="Lily" },
                new Demo_ProductProp { Id = 2, Key = "Size", Value="18gr" },
                new Demo_ProductProp { Id = 3, Key = "Color", Value="White" },
            }
        });
    }
}
